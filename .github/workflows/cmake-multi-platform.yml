# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on: [ push ]

env:
  artifact_linux_bin: ogre3d-scripts-lsp_linux
  artifact_win_bin: ogre3d-scripts-lsp_windows
  linux_bin: ogre_scripts_LSP
  win_bin: ogre_scripts_LSP.exe

jobs:
  build:
    runs-on: ${{ matrix.config.os }}

    # timeout set to 10 minutes
    timeout-minutes: 10

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: true

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        config:
          - {
            os: ubuntu-latest,
            build_type: Release,
            c_compiler: gcc,
            cpp_compiler: g++,
            bin: "/ogre_scripts_LSP",
            artifact_bin: "ogre3d-scripts-lsp_linux",
            artifact: "ogre3d-scripts-lsp_linux.tar.xz"
          }
          - {
            os: windows-latest,
            build_type: Release,
            c_compiler: cl,
            cpp_compiler: cl,
            bin: "\\Release\\ogre_scripts_LSP.exe",
            artifact_bin: "ogre3d-scripts-lsp_windows",
            artifact: "ogre3d-scripts-lsp_windows.tar.xz"
          }

    steps:
      - uses: actions/checkout@v3

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.config.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.config.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.config.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}

      #      - name: Install Strip
      #        run: cmake --install ${{ steps.strings.outputs.build-output-dir }} --prefix instdir --strip

      #      - name: Pack
      #        working-directory: instdir
      #        run: cmake -E tar cJfv ../${{ matrix.config.artifact }} .


      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.strings.outputs.build-output-dir }}${{ matrix.config.bin }}
          name: ${{ matrix.config.artifact_bin }}

  publish_release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest

    needs: [ build ]

    steps:
      - uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Give the binary execute permission
        run: chmod +x ${{ env.artifact_linux_bin }}/${{ env.linux_bin }}

      - name: Current release version
        run: echo "${{ steps.version.outputs.version_bin }}"

      - name: Version number
        run: echo "version_bin=$(./${{ env.artifact_linux_bin }}/${{ env.linux_bin }} --version)" >> "$GITHUB_OUTPUT" # calculate version here
        id: version

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.version.outputs.version_bin }}
          # tag_name: ${{ steps.version.outputs.version_bin }}
          tag_name: ${{ github.ref }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}

      # upload linux release
      - name: Upload linux binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.artifact_linux_bin }}/${{ env.linux_bin }}
          asset_name: ${{ env.linux_bin }}
          asset_content_type: application/x-executable

      # upload win release
      - name: Upload windows binary to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.artifact_win_bin }}/${{ env.win_bin }}
          asset_name: ${{ env.win_bin }}
          asset_content_type: application/x-dosexec
