// Bump map vertex program, support for this is required
vertex_program Examples/BumpMapVPHLSL hlsl
{
	source Example_BumpMapping.cg
	entry_point main_vp
	target vs_2_0
}

vertex_program Examples/BumpMapVPGLSL glsl glsles
{
	source Example_BumpMappingVp.glsl
}

vertex_program Examples/BumpMapVP unified
{
	delegate Examples/BumpMapVPGLSL
	delegate Examples/BumpMapVPHLSL
}

// Bump map fragment program, support for this is optional
fragment_program Examples/BumpMapFPHLSL hlsl
{
	source Example_BumpMapping.cg
	entry_point main_fp
	target ps_2_0
}

fragment_program Examples/BumpMapFPGLSL glsl glsles
{
	source Example_BumpMappingFp.glsl
	default_params
	{
		// assign samplers as required by GLSL
		param_named normalMap int 0
	}
}

fragment_program Examples/BumpMapFP unified
{
	delegate Examples/BumpMapFPGLSL
	delegate Examples/BumpMapFPHLSL
}

// Bump map vertex program shadow receiver
vertex_program Examples/BumpMapVPShadowRcvCg cg
{
	source Example_BumpMapping.cg
	entry_point main_shadowreceiver_vp
	profiles vs_1_1 arbvp1
}

// Bump map vertex program shadow receiver
vertex_program Examples/BumpMapVPShadowRcvGLSL glsl glsles
{
	source Example_BumpMappingShadowRcvVp.glsl
}

vertex_program Examples/BumpMapVPShadowRcv unified
{
	delegate Examples/BumpMapVPShadowRcvGLSL
	delegate Examples/BumpMapVPShadowRcvCg
}

// Bump map fragment program shadow receiver, support for this is optional
fragment_program Examples/BumpMapFPShadowRcvCg cg
{
	source Example_BumpMapping.cg
	entry_point main_shadowreceiver_fp
	profiles ps_2_0 arbfp1 fp20
}

// Bump map fragment program shadow receiver, support for this is optional
fragment_program Examples/BumpMapFPShadowRcvGLSL glsl glsles
{
	source Example_BumpMappingShadowRcvFp.glsl
	default_params
	{
		// assign samplers as required by GLSL
		param_named shadowMap int 0
		param_named normalMap int 1
	}
}

fragment_program Examples/BumpMapFPShadowRcv unified
{
	delegate Examples/BumpMapFPShadowRcvGLSL
	delegate Examples/BumpMapFPShadowRcvCg
}


material Game/BumpMapping/MultiLight {
    technique {
		shadow_receiver_material Game/BumpMapping/MultiLight/Rcv

		// Base ambient pass
		pass ambient {
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			diffuse 0 0 0
		}

		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
        pass perlight {
            // do this for each light
            iteration once_per_light
            scene_blend add

            // base colours, not needed for rendering, but as information
            // to lighting pass categorisation routine
            ambient 0 0 0

            // Vertex program reference
            vertex_program_ref Examples/BumpMapVP
            {
                param_named_auto lightPosition light_position_object_space 0
                param_named_auto worldViewProj worldviewproj_matrix
            }

            // Fragment program
            fragment_program_ref Examples/BumpMapFP
            {
                param_named_auto lightDiffuse light_diffuse_colour 0
            }

            // Base bump map
            texture_unit normalmap
            {
                texture normal_map.jpg
            }
        }

        pass decal {
            lighting off
            scene_blend dest_colour zero

            texture_unit decalmap
            {
                texture color_base.jpeg
            }
        }

    }
}

material Game/BumpMapping/MultiLight/Rcv
{
	technique
	{
		pass
		{
			scene_blend add

			// texture shadow receiver program
			vertex_program_ref Examples/BumpMapVPShadowRcv
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto worldMatrix world_matrix
				param_named_auto texViewProj texture_viewproj_matrix
			}
			// Additive texture shadow receiver program
			fragment_program_ref Examples/BumpMapFPShadowRcv
			{
				param_named_auto lightDiffuse light_diffuse_colour 0
			}

			texture_unit shadowMap
			{
				content_type shadow
			}

			texture_unit normalMap
			{
                texture normal_map.jpg
			}
		}
	}
}

fragment_program Game/Floor/ShaderFp glsl glsles {
    source FloorFp.glsl
}

vertex_program Game/Floor/ShaderVp glsl glsles {
    source FloorVp.glsl
}

material level_floor {
//    receive_shadows on
    technique {
        pass perlight {
            scene_blend add

            vertex_program_ref Game/Floor/ShaderVp {
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto worldMatrix world_matrix
				param_named_auto texViewProj texture_viewproj_matrix
            }
            fragment_program_ref Game/Floor/ShaderFp {
                param_named_auto lightDiffuse light_diffuse_colour 0
            }
        }
    }
}

material Game/BumpMapping/MultiLightSpecular {
	technique
	{
		pass decal
		{
			//specular 1 1 1 4

			texture_unit decalmap
			{
				texture color_base.jpeg
			}

			rtshader_system normalmap
			{
			}
		}

	}
}

material level_floor1 : Game/BumpMapping/MultiLightSpecular {
    // This is the preferred technique which uses both vertex and
    // fragment programs, supports coloured lights
    technique
    {

        // Decal pass
        pass decal
        {
            texture_unit decalmap
            {
                texture color_base.jpeg
            }

			rtshader_system normalmap
			{
				lighting_stage normal_map normal_map.jpg
				//lighting_stage metal_roughness texture color_specular.jpg
			}
        }

    }
}

material male.texture : Game/BumpMapping/MultiLight/Rcv {
    receive_shadows on

    technique {
        pass perlight {
            texture_unit normalMap {
                texture male.texture.jpeg
            }
        }

        pass decal {
            diffuse 1.0 1.0 1.0 1.0
            specular 0.4 0.4 0.4 0.5
            scene_blend dest_colour zero

            // - base_color_texture
            texture_unit decalmap {
                texture male.texture.jpeg
                tex_address_mode wrap
                colour_op modulate
            }
        }
    }
}

material female.texture : Game/BumpMapping/MultiLight/Rcv {
    receive_shadows on

    technique {
        pass perlight {
            texture_unit normalMap {
                texture male.texture.jpeg
            }
        }

        pass decal {
            diffuse 1.0 1.0 1.0 1.0
            specular 0.4 0.4 0.4 0.5
            scene_blend dest_colour zero

            // - base_color_texture
            texture_unit decalmap {
                texture male.texture.jpeg
                tex_address_mode wrap
                colour_op modulate
            }
        }
    }
}
